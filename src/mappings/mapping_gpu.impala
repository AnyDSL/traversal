// Mapping for GPU raytracing
static block_w = 32;
static block_h = 2;

type Real = f32;
type Mask = bool;
type Intr = i32;
type HitFn = fn (Intr, Real, Real, Real) -> ();

fn real(x: f32) -> Real { x }
fn intr(x: i32) -> Intr { x }
fn mask(x: bool) -> Mask { x }

fn terminated(a: Intr) -> Mask { a >= 0 }
fn any(m: Mask) -> bool { m }
fn all(m: Mask) -> bool { m }
fn and(a: Mask, b: Mask) -> Mask { a & b }
fn greater_eq(a: Real, b: Real) -> Mask { a >= b }
fn greater(a: Real, b: Real) -> Mask    { a >  b }
fn not_eq(a: Real, b: Real) -> Mask     { a != b }
fn select_real(m: Mask, a: Real, b: Real) -> Real { if m { a } else { b } }
fn select_intr(m: Mask, a: Intr, b: Intr) -> Intr { if m { a } else { b } }

fn abs_real(r: Real) -> Real { fabsf(r) }
fn rcp_real(r: Real) -> Real { 1.0f / r }
fn prodsign_real(x: Real, y: Real) -> Real { bitcast[f32](bitcast[i32](x) ^ (bitcast[i32](y) & intr(bitcast[i32](0x80000000u)))) }
fn safe_rcp(x: Real) -> Real { if x == 0.0f { copysignf(flt_max, x) } else { rcp_real(x) } }

fn min_real(a: Real, b: Real) -> Real { fminf(a, b) }
fn max_real(a: Real, b: Real) -> Real { fmaxf(a, b) }
fn minmin_real(a: Real, b: Real, c: Real) -> Real { bitcast[f32](minmin(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))) }
fn maxmax_real(a: Real, b: Real, c: Real) -> Real { bitcast[f32](maxmax(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))) }
fn minmax_real(a: Real, b: Real, c: Real) -> Real { bitcast[f32](minmax(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))) }
fn maxmin_real(a: Real, b: Real, c: Real) -> Real { bitcast[f32](maxmin(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))) }

struct BBox {
    lo_x: f32, hi_x: f32,
    lo_y: f32, hi_y: f32,
    lo_z: f32, hi_z: f32
}

struct Node {
    left_bb: BBox,
    right_bb: BBox,
    left: i32,
    right: i32,
    pad0: i32,
    pad1: i32
}

fn iterate_triangles(nodes: &[Node], mut tris: &[Vec4]) -> IterateTrianglesFn {
    |t, stack, body| {
        let mut loop_id = !stack.top();
        while true {
            let sv0 = ldg4_f32(&tris(loop_id + 0) as &simd[f32 * 4]);
            let sv1 = ldg4_f32(&tris(loop_id + 1) as &simd[f32 * 4]);
            let sv2 = ldg4_f32(&tris(loop_id + 2) as &simd[f32 * 4]);

            let v0 = vec3(sv0(0), sv0(1), sv0(2));
            let v1 = vec3(sv1(0), sv1(1), sv1(2));
            let v2 = vec3(sv2(0), sv2(1), sv2(2));

            let e1 = vec3_sub(v0, v1);
            let e2 = vec3_sub(v2, v0);
            let n = vec3_cross(e1, e2);

            let tri = Tri {
                v0: || { v0 },
                e1: || { e1 },
                e2: || { e2 },
                n:  || { n }
            };

            body(tri, bitcast[i32](sv1(3)));

            if bitcast[u32](sv2(3)) == 0x80000000u {
                break()
            }

            loop_id += 3;
        }
    }
}

fn iterate_children(mut nodes: &[Node]) -> IterateChildrenFn {
    |t, stack, body| {
        let mut node_ptr = &nodes(stack.top()) as &[f32];
        let bb0 = ldg4_f32(&node_ptr(0) as &simd[f32 * 4]);
        let bb1 = ldg4_f32(&node_ptr(4) as &simd[f32 * 4]);
        let bb2 = ldg4_f32(&node_ptr(8) as &simd[f32 * 4]);
        let mut children = ldg4_i32(&node_ptr(12) as &simd[i32 * 4]);

        let box1 = Box {
            min: || { vec3(bb0(0), bb0(2), bb1(0)) },
            max: || { vec3(bb0(1), bb0(3), bb1(1)) }
        };

        let box2 = Box {
            min: || { vec3(bb1(2), bb2(0), bb2(2)) },
            max: || { vec3(bb1(3), bb2(1), bb2(3)) }
        };

        body(box1, |t00, t01| {
            body(box2, |t10, t11| {
                let hit0 = t00 <= t01;
                let hit1 = t10 <= t11;
                if !hit0 && !hit1 {
                    stack.pop();
                } else {
                    if hit0 && hit1 {
                        if t00 < t10 {
                            let children0 = children(0);
                            children(0) = children(1);
                            children(1) = children0;
                        }
                        stack.push(children(0), 0.0f);
                        stack.set_top(children(1), 0.0f);
                    } else {
                        stack.set_top(if hit0 { children(0) } else { children(1) }, 0.0f)
                    }
                }
            });
        });
    }
}

fn iterate_rays(mut rays: &[Ray], mut hits: &[Hit]) -> IterateRaysFn {
    |ray_count, body| @{
        let dev = acc_dev();
        let grid = (ray_count / block_h, block_h, 1);
        let block = (block_w, block_h, 1);

        acc(dev, grid, block, |exit| {
            let id = acc_tidx() + acc_bdimx() * (acc_tidy() + acc_bdimy() * (acc_bidx() + acc_gdimx() * acc_bidy()));
            if id > ray_count {
                exit()
            }

            let mut ray_ptr = &rays(id) as &[f32];
            let ray0 = ldg4_f32(&ray_ptr(0) as &simd[f32 * 4]);
            let ray1 = ldg4_f32(&ray_ptr(4) as &simd[f32 * 4]);

            @body(vec3(ray0(0), ray0(1), ray0(2)),
                  vec3(ray1(0), ray1(1), ray1(2)),
                  ray0(3), ray1(3), |inst, tri, t, u, v| {
                *(&hits(id) as &simd[f32 * 4]) = simd[bitcast[f32](inst), bitcast[f32](tri), t, u];
            });
        })
    }
}

fn transparency(mut indices: &[i32], texcoords: &[Vec2], masks: &[TransparencyMask], mask_buf: &[i8]) -> TransparencyFn {
    |mask, tri_id, u, v| {
        if mask {
            let tri = *(&indices(tri_id * 4) as &simd[i32 * 4]);
            let uv0 = texcoords(tri(0));
            let uv1 = texcoords(tri(1));
            let uv2 = texcoords(tri(2));

            let w = 1.0f - u - v;
            let tu = uv0.x * w + uv1.x * u + uv2.x * v;
            let tv = uv0.y * w + uv1.y * u + uv2.y * v;

            lookup_mask(masks(tri(3)), mask_buf, tu, tv)
        } else {
            false
        }
    }
}

extern fn intersect_gpu(nodes: &[Node], tris: &[Vec4], rays: &[Ray], hits: &[Hit], ray_count: i32) -> () {
    traverse(iterate_rays(rays, hits),
             iterate_children(nodes),
             iterate_triangles(nodes, tris),
             no_transparency,
             no_instance,
             ray_count, false, false)
}

extern fn occluded_gpu(nodes: &[Node], tris: &[Vec4], rays: &[Ray], hits: &[Hit], ray_count: i32) -> () {
    traverse(iterate_rays(rays, hits),
             iterate_children(nodes),
             iterate_triangles(nodes, tris),
             no_transparency,
             no_instance,
             ray_count, false, true)
}

extern fn intersect_masked_gpu(nodes: &[Node], tris: &[Vec4], rays: &[Ray], hits: &[Hit],
                               indices: &[i32], texcoords: &[Vec2], masks: &[TransparencyMask], mask_buf: &[i8], ray_count: i32) -> () {
    traverse(iterate_rays(rays, hits),
             iterate_children(nodes),
             iterate_triangles(nodes, tris),
             transparency(indices, texcoords, masks, mask_buf),
             no_instance,
             ray_count, false, false)
}

extern fn occluded_masked_gpu(nodes: &[Node], tris: &[Vec4], rays: &[Ray], hits: &[Hit],
                              indices: &[i32], texcoords: &[Vec2], masks: &[TransparencyMask], mask_buf: &[i8], ray_count: i32) -> () {
    traverse(iterate_rays(rays, hits),
             iterate_children(nodes),
             iterate_triangles(nodes, tris),
             transparency(indices, texcoords, masks, mask_buf),
             no_instance,
             ray_count, false, true)
}
