// Mapping for packet tracing on the CPU
static vector_size = 8;

type Real = simd[f32 * 8];
type Mask = simd[f32 * 8];
type Intr = simd[i32 * 8];
type HitFn = fn (Intr, Real, Real, Real) -> ();

fn real(x: f32) -> Real { simd[x, x, x, x, x, x, x, x] }
fn intr(x: i32) -> Intr { simd[x, x, x, x, x, x, x, x] }

fn any(m: Mask) -> bool { movmskps256(m) != 0 }
fn all(m: Mask) -> bool { movmskps256(m) == 0xFF }
fn and(a: Mask, b: Mask) -> Mask { bitcast8_i32_f32(bitcast8_f32_i32(a) & bitcast8_f32_i32(b)) }
fn greater_eq(a: Real, b: Real) -> Mask { cmpps256(b, a, 2i8) }
fn greater(a: Real, b: Real) -> Mask    { cmpps256(b, a, 1i8) }
fn not_eq(a: Real, b: Real) -> Mask     { cmpps256(b, a, 4i8) }
fn select_real(m: Mask, a: Real, b: Real) -> Real { blendvps256(b, a, m) }
fn select_intr(m: Mask, a: Intr, b: Intr) -> Intr { bitcast8_f32_i32(blendvps256(bitcast8_i32_f32(b), bitcast8_i32_f32(a), m)) }

fn abs_real(x: Real) -> Real { bitcast8_i32_f32(bitcast8_f32_i32(x) & intr(0x7FFFFFFF)) }
fn rcp_real(x: Real) -> Real {
    let r = rcpps256(x);
    r * (real(2.0f) - x * r)
}
fn prodsign_real(x: Real, y: Real) -> Real { bitcast8_i32_f32(bitcast8_f32_i32(x) ^ (bitcast8_f32_i32(y) & intr(0x80000000))) }

// Use integer instructions for min/max
fn min_real(a: Real, b: Real) -> Real { bitcast8_i32_f32(select8_i32(bitcast8_f32_i32(a) < bitcast8_f32_i32(b), bitcast8_f32_i32(a), bitcast8_f32_i32(b))) }
fn max_real(a: Real, b: Real) -> Real { bitcast8_i32_f32(select8_i32(bitcast8_f32_i32(a) > bitcast8_f32_i32(b), bitcast8_f32_i32(a), bitcast8_f32_i32(b))) }
fn minmin_real(a: Real, b: Real, c: Real) -> Real { min_real(min_real(a, b), c) }
fn maxmax_real(a: Real, b: Real, c: Real) -> Real { max_real(max_real(a, b), c) }
fn minmax_real(a: Real, b: Real, c: Real) -> Real { max_real(min_real(a, b), c) }
fn maxmin_real(a: Real, b: Real, c: Real) -> Real { min_real(max_real(a, b), c) }

struct Node {
    min_x: [f32 * 4], min_y: [f32 * 4], min_z: [f32 * 4],
    max_x: [f32 * 4], max_y: [f32 * 4], max_z: [f32 * 4],
    children: [i32 * 4]
}

fn iterate_triangles(nodes: &[Node], t: Real, stack: Stack, mut tris: &[Vec4], body: fn (Tri, Intr) -> ()) -> () {
    // Cull this leaf if it is too far away
    if all(greater_eq(stack.tmin(), t)) { return() }

    let mut tri_id = !stack.top();
    while true {
        let tri_data = &tris(tri_id) as &[float];

        for i in @unroll(0, 4) {
            let v0 = vec3(real(tri_data( 0 + i)), real(tri_data( 4 + i)), real(tri_data( 8 + i)));
            let e1 = vec3(real(tri_data(12 + i)), real(tri_data(16 + i)), real(tri_data(20 + i)));
            let e2 = vec3(real(tri_data(24 + i)), real(tri_data(28 + i)), real(tri_data(32 + i)));
            let n  = vec3(real(tri_data(36 + i)), real(tri_data(40 + i)), real(tri_data(44 + i)));

            let tri = Tri {
                vertex: |i| {
                    if (i == 0) { v0 }
                    else if (i == 1) { vec3_sub(v0, e1) }
                    else /*if (i == 2)*/ { vec3_add(v0, e2) }
                },
                edge: |i| {
                    if (i == 0) { e1 }
                    else /*if (i == 1)*/ { e2 }
                },
                normal: || { n }
            };

            body(tri, intr(tri_id));
        }

        if bitcast_f32_i32(tri_data(48)) == 0x80000000 {
            break()
        }

        tri_id += 12;
    }
}

fn iterate_children(nodes: &[Node], t: Real, stack: Stack, body: fn(Box, fn (Real, Real) -> ()) -> ()) -> () {
    let node = nodes(stack.top());
    let tmin = stack.tmin();
    stack.pop();

    // Cull this node if it is too far away
    if all(greater_eq(tmin, t)) { return() }

    for i in @unroll(0, 4) {
        if node.children(i) == 0 { break() }

        let box = Box {
            min: || { vec3(real(node.min_x(i)), real(node.min_y(i)), real(node.min_z(i))) },
            max: || { vec3(real(node.max_x(i)), real(node.max_y(i)), real(node.max_z(i))) }
        };

        body(box, |t0, t1| {
            let t = select_real(greater_eq(t1, t0), t0, real(flt_max));
            if any(greater_eq(t1, t0)) {
                if any(greater(stack.tmin(), t)) {
                    stack.push_top(node.children(i), t)
                } else {
                    stack.push(node.children(i), t)
                }
            }
        });
    }
}

fn iterate_rays(rays: &[Ray], mut hits: &[Hit], ray_count: i32, body: fn (Vec3, Vec3, Real, Real, HitFn) -> ()) -> () {
    assert(|| { ray_count % vector_size == 0 }, "iterate_rays: number of rays must be a multiple of vector size");

    for i in range_step(0, ray_count, vector_size) @{
        let org = vec3(simd[rays(i + 0).org.x, rays(i + 1).org.x, rays(i + 2).org.x, rays(i + 3).org.x, rays(i + 4).org.x, rays(i + 5).org.x, rays(i + 6).org.x, rays(i + 7).org.x],
                       simd[rays(i + 0).org.y, rays(i + 1).org.y, rays(i + 2).org.y, rays(i + 3).org.y, rays(i + 4).org.y, rays(i + 5).org.y, rays(i + 6).org.y, rays(i + 7).org.y],
                       simd[rays(i + 0).org.z, rays(i + 1).org.z, rays(i + 2).org.z, rays(i + 3).org.z, rays(i + 4).org.z, rays(i + 5).org.z, rays(i + 6).org.z, rays(i + 7).org.z]);
        let dir = vec3(simd[rays(i + 0).dir.x, rays(i + 1).dir.x, rays(i + 2).dir.x, rays(i + 3).dir.x, rays(i + 4).dir.x, rays(i + 5).dir.x, rays(i + 6).dir.x, rays(i + 7).dir.x],
                       simd[rays(i + 0).dir.y, rays(i + 1).dir.y, rays(i + 2).dir.y, rays(i + 3).dir.y, rays(i + 4).dir.y, rays(i + 5).dir.y, rays(i + 6).dir.y, rays(i + 7).dir.y],
                       simd[rays(i + 0).dir.z, rays(i + 1).dir.z, rays(i + 2).dir.z, rays(i + 3).dir.z, rays(i + 4).dir.z, rays(i + 5).dir.z, rays(i + 6).dir.z, rays(i + 7).dir.z]);
        let tmin = simd[rays(i + 0).org.w, rays(i + 1).org.w, rays(i + 2).org.w, rays(i + 3).org.w, rays(i + 4).org.w, rays(i + 5).org.w, rays(i + 6).org.w, rays(i + 7).org.w];
        let tmax = simd[rays(i + 0).dir.w, rays(i + 1).dir.w, rays(i + 2).dir.w, rays(i + 3).dir.w, rays(i + 4).dir.w, rays(i + 5).dir.w, rays(i + 6).dir.w, rays(i + 7).dir.w];

        body(org, dir, tmin, tmax, |tri, t, u, v| {
            for j in @unroll(0, vector_size) {
                hits(i + j).tri_id = tri(j);
                hits(i + j).tmax = t(j);
                hits(i + j).u = u(j);
                hits(i + j).v = v(j);
            }
        });
    }
}
