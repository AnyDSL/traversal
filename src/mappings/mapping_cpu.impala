// Mapping for packet tracing on the CPU
static vector_size = 8;

type Real = simd[f32 * 8];
type Mask = simd[bool * 8];
type Intr = simd[i32 * 8];
type HitFn = fn (Intr, Real, Real, Real) -> ();

fn select_real(m: Mask, a: Real, b: Real) -> Real { select8_f32(m, a, b) }
fn select_intr(m: Mask, a: Intr, b: Intr) -> Intr { select8_i32(m, a, b) }
fn real(x: f32) -> Real { simd[x, x, x, x, x, x, x, x] }
fn intr(x: i32) -> Intr { simd[x, x, x, x, x, x, x, x] }

fn any(m: Mask) -> bool { true }
fn all(m: Mask) -> bool { false }

fn abs_real(x: Real) -> Real { bitcast8_i32_f32(bitcast8_f32_i32(x) & intr(0x7FFFFFFF)) }
fn rcp_real(x: Real) -> Real {
    let sign = bitcast8_f32_i32(x) & intr(0x80000000);
    select8_f32(abs_real(x) < real(flt_eps), bitcast8_i32_f32(sign | intr(bitcast_f32_i32(flt_max))), real(1.0f) / x)
}
fn prodsign_real(x: Real, y: Real) -> Real { bitcast8_i32_f32(bitcast8_f32_i32(x) ^ (bitcast8_f32_i32(y) & intr(0x80000000))) }
fn min_real(a: Real, b: Real) -> Real { select8_f32(a < b, a, b) }
fn max_real(a: Real, b: Real) -> Real { select8_f32(a > b, a, b) }
fn minmin_real(a: Real, b: Real, c: Real) -> Real { min_real(min_real(a, b), c) }
fn maxmax_real(a: Real, b: Real, c: Real) -> Real { max_real(max_real(a, b), c) }
fn minmax_real(a: Real, b: Real, c: Real) -> Real { max_real(min_real(a, b), c) }
fn maxmin_real(a: Real, b: Real, c: Real) -> Real { min_real(max_real(a, b), c) }

struct Node {
    min_x: [f32 * 4], min_y: [f32 * 4], min_z: [f32 * 4],
    max_x: [f32 * 4], max_y: [f32 * 4], max_z: [f32 * 4],
    children: [i32 * 4]
}

fn iterate_triangles(nodes: &[Node], node_id: i32, mut tris: &[Vec4], body: fn (Tri, Intr) -> ()) -> () {
    let mut loop_id = !node_id;

    while true {
        let v0x = &tris(loop_id + 0) as &[float];
        let v0y = &tris(loop_id + 1) as &[float];
        let v0z = &tris(loop_id + 2) as &[float];

        let e1x = &tris(loop_id + 3) as &[float];
        let e1y = &tris(loop_id + 4) as &[float];
        let e1z = &tris(loop_id + 5) as &[float];

        let e2x = &tris(loop_id + 6) as &[float];
        let e2y = &tris(loop_id + 7) as &[float];
        let e2z = &tris(loop_id + 8) as &[float];

        let nx = &tris(loop_id + 9) as &[float];
        let ny = &tris(loop_id + 10) as &[float];
        let nz = &tris(loop_id + 11) as &[float];

        let zero = vec3(real(-0.0f), real(-0.0f), real(-0.0f));
        for i in range(0, 4) {
            let v0 = vec3(real(v0x(i)), real(v0y(i)), real(v0z(i)));
            let e1 = vec3(real(e1x(i)), real(e1y(i)), real(e1z(i)));
            let e2 = vec3(real(e2x(i)), real(e2y(i)), real(e2z(i)));
            let n = vec3(real(nx(i)), real(ny(i)), real(nz(i)));

            let tri = Tri {
                vertex: |i| {
                    if (i == 0) { v0 }
                    else if (i == 1) { vec3_sub(v0, e1) }
                    else if (i == 2) { vec3_add(v0, e2) }
                    else { zero }
                },
                edge: |i| {
                    if (i == 0) { e1 }
                    else if (i == 1) { e2 }
                    else { zero }
                },
                normal: || { n }
            };

            body(tri, intr(loop_id));
        }

        // Stop the loop when we reach the sentinel
        if bitcast_f32_i32(nz(4)) == 0x80000000 {
            break()
        }

        loop_id += 12;
    }
}

fn iterate_children(nodes: &[Node], node_id: i32, t: Real, stack: Stack, body: fn(Box, fn (Real, Real) -> ()) -> ()) -> () {
    fn greater_eq(a: Real, b: Real) -> i32 { movmskps256(cmpps256(b, a, 2i8)) }
    fn greater(a: Real, b: Real) -> i32 { movmskps256(cmpps256(b, a, 1i8)) }

    let tmin = stack.tmin();
    stack.pop();

    if greater(t, tmin) != 0 {
        let node = nodes(node_id);
        for i in range(0, 4) {
            if node.children(i) == 0 { break() }

            let box = Box {
                min: || { vec3(real(node.min_x(i)), real(node.min_y(i)), real(node.min_z(i))) },
                max: || { vec3(real(node.max_x(i)), real(node.max_y(i)), real(node.max_z(i))) }
            };

            @body(box, |t0, t1| {
                let t = select_real(t1 >= t0, t0, real(flt_max));
                if greater_eq(t1, t0) != 0 {
                    if greater(stack.tmin(), t) != 0 {
                        stack.push_top(node.children(i), t)
                    } else {
                        stack.push(node.children(i), t)
                    }
                }
            });
        }
    }
}

fn iterate_rays(rays: &[Ray], mut hits: &[Hit], ray_count: i32, body: fn (Vec3, Vec3, Real, Real, HitFn) -> ()) -> () {
    assert(|| { ray_count % vector_size == 0 }, "iterate_rays: number of rays must be a multiple of vector size");

    for i in range_step(0, ray_count, vector_size) @{
        let org = vec3(simd[rays(i + 0).org.x, rays(i + 1).org.x, rays(i + 2).org.x, rays(i + 3).org.x, rays(i + 4).org.x, rays(i + 5).org.x, rays(i + 6).org.x, rays(i + 7).org.x],
                       simd[rays(i + 0).org.y, rays(i + 1).org.y, rays(i + 2).org.y, rays(i + 3).org.y, rays(i + 4).org.y, rays(i + 5).org.y, rays(i + 6).org.y, rays(i + 7).org.y],
                       simd[rays(i + 0).org.z, rays(i + 1).org.z, rays(i + 2).org.z, rays(i + 3).org.z, rays(i + 4).org.z, rays(i + 5).org.z, rays(i + 6).org.z, rays(i + 7).org.z]);
        let dir = vec3(simd[rays(i + 0).dir.x, rays(i + 1).dir.x, rays(i + 2).dir.x, rays(i + 3).dir.x, rays(i + 4).dir.x, rays(i + 5).dir.x, rays(i + 6).dir.x, rays(i + 7).dir.x],
                       simd[rays(i + 0).dir.y, rays(i + 1).dir.y, rays(i + 2).dir.y, rays(i + 3).dir.y, rays(i + 4).dir.y, rays(i + 5).dir.y, rays(i + 6).dir.y, rays(i + 7).dir.y],
                       simd[rays(i + 0).dir.z, rays(i + 1).dir.z, rays(i + 2).dir.z, rays(i + 3).dir.z, rays(i + 4).dir.z, rays(i + 5).dir.z, rays(i + 6).dir.z, rays(i + 7).dir.z]);
        let tmin = simd[rays(i + 0).org.w, rays(i + 1).org.w, rays(i + 2).org.w, rays(i + 3).org.w, rays(i + 4).org.w, rays(i + 5).org.w, rays(i + 6).org.w, rays(i + 7).org.w];
        let tmax = simd[rays(i + 0).dir.w, rays(i + 1).dir.w, rays(i + 2).dir.w, rays(i + 3).dir.w, rays(i + 4).dir.w, rays(i + 5).dir.w, rays(i + 6).dir.w, rays(i + 7).dir.w];

        body(org, dir, tmin, tmax, |tri, t, u, v| @{
            for j in range(0, vector_size) {
                hits(i + j).tri_id = tri(j);
                hits(i + j).tmax = t(j);
                hits(i + j).u = u(j);
                hits(i + j).v = v(j);
            }
        });
    }
}
