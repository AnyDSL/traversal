// Mapping for packet tracing on the CPU
static vector_size = 8;

type Real = simd[f32 * 8];
type Mask = simd[f32 * 8];
type Intr = simd[i32 * 8];
type HitFn = fn (Intr, Real, Real, Real) -> ();

fn real(x: f32) -> Real { simd[x, x, x, x, x, x, x, x] }
fn intr(x: i32) -> Intr { simd[x, x, x, x, x, x, x, x] }
fn mask(x: bool) -> Mask { let f = bitcast[f32](if x { 0xFFFFFFFFu } else { 0u }); real(f) }

fn terminated(a: Intr) -> Mask { bitcast[simd[f32 * 8]](a ^ intr(bitcast[i32](0x80000000u))) }
fn any(m: Mask) -> bool { movmskps256(m) != 0 }
fn all(m: Mask) -> bool { movmskps256(m) == 0xFF }
fn and(a: Mask, b: Mask) -> Mask { bitcast[simd[f32 * 8]](bitcast[simd[i32 * 8]](a) & bitcast[simd[i32 * 8]](b)) }
fn greater_eq(a: Real, b: Real) -> Mask { cmpps256(b, a, 2i8) }
fn greater(a: Real, b: Real) -> Mask    { cmpps256(b, a, 1i8) }
fn not_eq(a: Real, b: Real) -> Mask     { cmpps256(b, a, 4i8) }
fn select_real(m: Mask, a: Real, b: Real) -> Real { blendvps256(b, a, m) }
fn select_intr(m: Mask, a: Intr, b: Intr) -> Intr { bitcast[simd[i32 * 8]](blendvps256(bitcast[simd[f32 * 8]](b), bitcast[simd[f32 * 8]](a), m)) }

fn abs_real(x: Real) -> Real { bitcast[simd[f32 * 8]](bitcast[simd[i32 * 8]](x) & intr(0x7FFFFFFF)) }
fn rcp_real(x: Real) -> Real {
    let r = rcpps256(x);
    r * (real(2.0f) - x * r)
}
fn safe_rcp(x: Real) -> Real {
    let sign_max = bitcast[simd[f32 * 8]](bitcast[simd[i32 * 8]](real(flt_max)) | (bitcast[simd[i32 * 8]](x) & intr(bitcast[i32](0x80000000u))));
    blendvps256(sign_max, rcp_real(x), not_eq(x, real(0.0f)))
}
fn prodsign_real(x: Real, y: Real) -> Real { bitcast[simd[f32 * 8]](bitcast[simd[i32 * 8]](x) ^ (bitcast[simd[i32 * 8]](y) & intr(bitcast[i32](0x80000000u)))) }

// Use integer instructions for min/max
fn min_real(a: Real, b: Real) -> Real { bitcast[simd[f32 * 8]](select[simd[bool * 8],simd[i32 * 8]](bitcast[simd[i32 * 8]](a) < bitcast[simd[i32 * 8]](b), bitcast[simd[i32 * 8]](a), bitcast[simd[i32 * 8]](b))) }
fn max_real(a: Real, b: Real) -> Real { bitcast[simd[f32 * 8]](select[simd[bool * 8],simd[i32 * 8]](bitcast[simd[i32 * 8]](a) > bitcast[simd[i32 * 8]](b), bitcast[simd[i32 * 8]](a), bitcast[simd[i32 * 8]](b))) }
fn minmin_real(a: Real, b: Real, c: Real) -> Real { min_real(min_real(a, b), c) }
fn maxmax_real(a: Real, b: Real, c: Real) -> Real { max_real(max_real(a, b), c) }
fn minmax_real(a: Real, b: Real, c: Real) -> Real { max_real(min_real(a, b), c) }
fn maxmin_real(a: Real, b: Real, c: Real) -> Real { min_real(max_real(a, b), c) }

struct Node {
    min_x: [f32 * 4], min_y: [f32 * 4], min_z: [f32 * 4],
    max_x: [f32 * 4], max_y: [f32 * 4], max_z: [f32 * 4],
    children: [i32 * 4]
}

fn iterate_triangles(nodes: &[Node], mut tris: &[Vec4]) -> IterateTrianglesFn {
    |t, stack, body, return| {
        // Cull this leaf if it is too far away
        if all(greater_eq(stack.tmin(), t)) { return() }

        let mut tri_id = !stack.top();
        while true {
            let tri_data = &tris(tri_id) as &[float];

            for i in @unroll(0, 4) {
                let id = bitcast[i32](tri_data(48 + i));

                let v0 = vec3(real(tri_data( 0 + i)), real(tri_data( 4 + i)), real(tri_data( 8 + i)));
                let e1 = vec3(real(tri_data(12 + i)), real(tri_data(16 + i)), real(tri_data(20 + i)));
                let e2 = vec3(real(tri_data(24 + i)), real(tri_data(28 + i)), real(tri_data(32 + i)));
                let n  = vec3(real(tri_data(36 + i)), real(tri_data(40 + i)), real(tri_data(44 + i)));
                let tri = Tri {
                    v0: || { v0 },
                    e1: || { e1 },
                    e2: || { e2 },
                    n:  || { n }
                };

                body(tri, intr(id));
            }

            if bitcast[u32](tri_data(52)) == 0x80000000u {
                break()
            }

            tri_id += 13;
        }
    }
}

fn iterate_children(nodes: &[Node]) -> IterateChildrenFn {
    |t, stack, body, return| {
        let node = nodes(stack.top());
        let tmin = stack.tmin();
        stack.pop();

        // Cull this node if it is too far away
        if all(greater_eq(tmin, t)) { return() }

        for i in @unroll(0, 4) {
            if node.children(i) == 0 { break() }

            let box = Box {
                min: || { vec3(real(node.min_x(i)), real(node.min_y(i)), real(node.min_z(i))) },
                max: || { vec3(real(node.max_x(i)), real(node.max_y(i)), real(node.max_z(i))) }
            };

            body(box, |t0, t1| {
                let t = select_real(greater_eq(t1, t0), t0, real(flt_max));
                if any(greater_eq(t1, t0)) {
                    if any(greater(stack.tmin(), t)) {
                        stack.push(node.children(i), t)
                    } else {
                        stack.push_under(node.children(i), t)
                    }
                }
            });
        }
    }
}

fn iterate_rays(rays: &[Ray], mut hits: &[Hit]) -> IterateRaysFn {
    |ray_count, body| {
        assert(|| { ray_count % vector_size == 0 }, "iterate_rays: number of rays must be a multiple of vector size");

        for j in $parallel(0, 0, ray_count / vector_size) {
            for i in range_step(j * vector_size, (j + 1) * vector_size, vector_size) @{
                let mut org: Vec3;
                let mut dir: Vec3;
                let mut tmin: Real;
                let mut tmax: Real;

                for k in @range(0, vector_size) {
                    org.x(k) = rays(i + k).org.x;
                    org.y(k) = rays(i + k).org.y;
                    org.z(k) = rays(i + k).org.z;

                    tmin(k) = rays(i + k).org.w;

                    dir.x(k) = rays(i + k).dir.x;
                    dir.y(k) = rays(i + k).dir.y;
                    dir.z(k) = rays(i + k).dir.z;

                    tmax(k) = rays(i + k).dir.w;
                }

                body(org, dir, tmin, tmax, |inst, tri, t, u, v| {
                    for j in @unroll(0, vector_size) {
                        hits(i + j).inst_id = inst(j);
                        hits(i + j).tri_id = tri(j);
                        hits(i + j).tmax = t(j);
                        hits(i + j).u = u(j);
                    }
                });
            }
        }
    }
}

fn transparency_instanced(mut indices: &[i32], texcoords: &[Vec2], masks: &[TransparencyMask], mask_buf: &[i8], instances: &[InstanceNode]) -> TransparencyFn {
    |mask, tri_id, u, v, inst_id| {
        let mut bit_mask = movmskps256(mask);
        let mut transp = bitcast[simd[i32 * 8]](mask);
        let w = real(1.0f) - u - v;
        let index_offset = instances(inst_id).index_offset;
        let tex_offset   = instances(inst_id).tex_offset;
        for i in @unroll(0, vector_size) {
            if (bit_mask & 1) != 0 {
                let tri = *(&indices((tri_id(i) + index_offset) * 4) as &simd[i32 * 4]);
                let uv0 = texcoords(tri(0) + tex_offset);
                let uv1 = texcoords(tri(1) + tex_offset);
                let uv2 = texcoords(tri(2) + tex_offset);

                let tu = uv0.x * w(i) + uv1.x * u(i) + uv2.x * v(i);
                let tv = uv0.y * w(i) + uv1.y * u(i) + uv2.y * v(i);

                let m = $lookup_mask(masks(tri(3)), mask_buf, tu, tv);

                transp(i) = if m { -1 } else { 0 }
            }
            bit_mask = bit_mask >> 1;
        }
        bitcast[simd[f32 * 8]](transp)
    }
}

fn transparency(mut indices: &[i32], texcoords: &[Vec2], masks: &[TransparencyMask], mask_buf: &[i8]) -> TransparencyFn {
    |mask, tri_id, u, v, inst_id| {
        let mut bit_mask = movmskps256(mask);
        let mut transp = bitcast[simd[i32 * 8]](mask);
        let w = real(1.0f) - u - v;
        for i in @unroll(0, vector_size) {
            if (bit_mask & 1) != 0 {
                let tri = *(&indices(tri_id(i) * 4) as &simd[i32 * 4]);
                let uv0 = texcoords(tri(0));
                let uv1 = texcoords(tri(1));
                let uv2 = texcoords(tri(2));

                let tu = uv0.x * w(i) + uv1.x * u(i) + uv2.x * v(i);
                let tv = uv0.y * w(i) + uv1.y * u(i) + uv2.y * v(i);

                let m = $lookup_mask(masks(tri(3)), mask_buf, tu, tv);

                transp(i) = if m { -1 } else { 0 }
            }
            bit_mask = bit_mask >> 1;
        }
        bitcast[simd[f32 * 8]](transp)
    }
}

extern fn intersect_cpu(nodes: &[Node], tris: &[Vec4], rays: &[Ray], hits: &[Hit], ray_count: i32) -> () {
    let config = TraversalConfig {
        iterate_children: iterate_children(nodes),
        iterate_triangles: iterate_triangles(nodes, tris),
        iterate_instances: no_instance(),
        transparency: no_transparency(),
        any_hit: false
    };

    traverse_rays(iterate_rays(rays, hits), ray_count, config);
}

extern fn occluded_cpu(nodes: &[Node], tris: &[Vec4], rays: &[Ray], hits: &[Hit], ray_count: i32) -> () {
    let config = TraversalConfig {
        iterate_children: iterate_children(nodes),
        iterate_triangles: iterate_triangles(nodes, tris),
        iterate_instances: no_instance(),
        transparency: no_transparency(),
        any_hit: true
    };

    traverse_rays(iterate_rays(rays, hits), ray_count, config);
}

extern fn intersect_cpu_masked(nodes: &[Node], tris: &[Vec4], rays: &[Ray], hits: &[Hit],
                               indices: &[i32], texcoords: &[Vec2], masks: &[TransparencyMask], mask_buf: &[i8], ray_count: i32) -> () {
    let config = TraversalConfig {
        iterate_children: iterate_children(nodes),
        iterate_triangles: iterate_triangles(nodes, tris),
        iterate_instances: no_instance(),
        transparency: transparency(indices, texcoords, masks, mask_buf),
        any_hit: false
    };

    traverse_rays(iterate_rays(rays, hits), ray_count, config);
}

extern fn occluded_cpu_masked(nodes: &[Node], tris: &[Vec4], rays: &[Ray], hits: &[Hit],
                              indices: &[i32], texcoords: &[Vec2], masks: &[TransparencyMask], mask_buf: &[i8], ray_count: i32) -> () {
    let config = TraversalConfig {
        iterate_children: iterate_children(nodes),
        iterate_triangles: iterate_triangles(nodes, tris),
        iterate_instances: no_instance(),
        transparency: transparency(indices, texcoords, masks, mask_buf),
        any_hit: true
    };

    traverse_rays(iterate_rays(rays, hits), ray_count, config);
}

extern fn intersect_cpu_instanced(nodes: &[Node], instances: &[InstanceNode], tris: &[Vec4], rays: &[Ray], hits: &[Hit], ray_count: i32) -> () {
    let bottom_config = TraversalConfig {
        iterate_children: iterate_children(nodes),
        iterate_triangles: iterate_triangles(nodes, tris),
        iterate_instances: no_instance(),
        transparency: no_transparency(),
        any_hit: false
    };

    let top_config = TraversalConfig {
        iterate_children: iterate_children(nodes),
        iterate_triangles: no_triangle(),
        iterate_instances: iterate_instances(nodes, instances, bottom_config),
        transparency: no_transparency(),
        any_hit: false
    };

    traverse_rays(iterate_rays(rays, hits), ray_count, top_config);
}

extern fn occluded_cpu_instanced(nodes: &[Node], instances: &[InstanceNode], tris: &[Vec4], rays: &[Ray], hits: &[Hit], ray_count: i32) -> () {
    let bottom_config = TraversalConfig {
        iterate_children: iterate_children(nodes),
        iterate_triangles: iterate_triangles(nodes, tris),
        iterate_instances: no_instance(),
        transparency: no_transparency(),
        any_hit: true
    };

    let top_config = TraversalConfig {
        iterate_children: iterate_children(nodes),
        iterate_triangles: no_triangle(),
        iterate_instances: iterate_instances(nodes, instances, bottom_config),
        transparency: no_transparency(),
        any_hit: true
    };

    traverse_rays(iterate_rays(rays, hits), ray_count, top_config);
}

extern fn intersect_cpu_masked_instanced(nodes: &[Node], instances: &[InstanceNode], tris: &[Vec4], rays: &[Ray], hits: &[Hit],
                                         indices: &[i32], texcoords: &[Vec2], masks: &[TransparencyMask], mask_buf: &[i8], ray_count: i32) -> () {
    let bottom_config = TraversalConfig {
        iterate_children: iterate_children(nodes),
        iterate_triangles: iterate_triangles(nodes, tris),
        iterate_instances: no_instance(),
        transparency: transparency_instanced(indices, texcoords, masks, mask_buf, instances),
        any_hit: false
    };

    let top_config = TraversalConfig {
        iterate_children: iterate_children(nodes),
        iterate_triangles: no_triangle(),
        iterate_instances: iterate_instances(nodes, instances, bottom_config),
        transparency: no_transparency(),
        any_hit: false
    };

    traverse_rays(iterate_rays(rays, hits), ray_count, top_config);
}

extern fn occluded_cpu_masked_instanced(nodes: &[Node], instances: &[InstanceNode], tris: &[Vec4], rays: &[Ray], hits: &[Hit],
                              indices: &[i32], texcoords: &[Vec2], masks: &[TransparencyMask], mask_buf: &[i8], ray_count: i32) -> () {
    let bottom_config = TraversalConfig {
        iterate_children: iterate_children(nodes),
        iterate_triangles: iterate_triangles(nodes, tris),
        iterate_instances: no_instance(),
        transparency: transparency_instanced(indices, texcoords, masks, mask_buf, instances),
        any_hit: true
    };

    let top_config = TraversalConfig {
        iterate_children: iterate_children(nodes),
        iterate_triangles: no_triangle(),
        iterate_instances: iterate_instances(nodes, instances, bottom_config),
        transparency: no_transparency(),
        any_hit: true
    };

    traverse_rays(iterate_rays(rays, hits), ray_count, top_config);
}
