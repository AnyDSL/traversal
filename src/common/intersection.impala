struct Tri {
    v0: fn () -> Vec3,
    e1: fn () -> Vec3,
    e2: fn () -> Vec3,
    n:  fn () -> Vec3
}

struct Box {
    min: fn () -> Vec3,
    max: fn () -> Vec3
}

// SLABS ray box intersection test
fn intersect_ray_box(oidir: Vec3, idir: Vec3, tmin: Real, tmax: Real, box: Box, intr: fn (Real, Real) -> ()) -> () {
    fn span_begin(a: Real, b: Real, c: Real, d: Real, e: Real, f: Real, g: Real) -> Real {
        maxmax_real(min_real(a, b), min_real(c, d), minmax_real(e, f, g))
    }

    fn span_end(a: Real, b: Real, c: Real, d: Real, e: Real, f: Real, g: Real) -> Real {
        minmin_real(max_real(a, b), max_real(c, d), maxmin_real(e, f, g))
    }

    let min = box.min();
    let max = box.max();

    let t0_x = min.x * idir.x - oidir.x;
    let t1_x = max.x * idir.x - oidir.x;
    let t0_y = min.y * idir.y - oidir.y;
    let t1_y = max.y * idir.y - oidir.y;
    let t0_z = min.z * idir.z - oidir.z;
    let t1_z = max.z * idir.z - oidir.z;

    let t0 = span_begin(t0_x, t1_x, t0_y, t1_y, t0_z, t1_z, tmin);
    let t1 = span_end(t0_x, t1_x, t0_y, t1_y, t0_z, t1_z, tmax);

    intr(t0, t1)
}

// Moeller-Trumbore triangle intersection algorithm
fn intersect_ray_tri(org: Vec3, dir: Vec3, tmin: Real, tmax: Real, tri: Tri, intr: fn (Mask, Real, Real, Real) -> ()) -> () {
    let v0 = tri.v0();
    let e1 = tri.e1();
    let e2 = tri.e2();
    let n = tri.n();

    let c = vec3_sub(v0, org);
    let r = vec3_cross(dir, c);
    let det = vec3_dot(n, dir);
    let abs_det = abs_real(det);

    let u = prodsign_real(vec3_dot(r, e2), det);
    let mut mask = greater_eq(u, real(0.0f));

    let v = prodsign_real(vec3_dot(r, e1), det);
    mask = and(mask, greater_eq(v, real(0.0f)));

    let w = abs_det - u - v;
    mask = and(mask, greater_eq(w, real(0.0f)));

    if rv_any(mask) {
        let t = prodsign_real(vec3_dot(n, c), det);
        mask = and(mask, and(greater_eq(t, abs_det * tmin), greater_eq(abs_det * tmax, t)));
        mask = and(mask, not_eq(det, real(0.0f)));
        if rv_any(mask) {
            let inv_det = rcp_real(abs_det);
            intr(mask, t * inv_det, u * inv_det, v * inv_det);
        }
    }
}
