struct InstanceNode {
    transf: Transf,
    id: i32,
    next: i32,
    pad: [i32 * 2]
}

fn iterate_instances(nodes: &[Node], instances: &[InstanceNode], config: TraversalConfig) -> IterateInstancesFn {
    |t, stack, body| {
        let mut inst_id = !stack.top();
        let tmin = stack.tmin();

        // Push an additional sentinel on the stack.
        // Simulates a new empty stack for the recursive call.
        stack.set_sentinel();
        while true {
            let inst_node = instances(inst_id);

            stack.push(inst_node.next, tmin);
            let ptr = stack.pointer();
            let inst = Inst {
                transf: inst_node.transf,
                id:     inst_node.id
            };

            fn traverse_inst(org: Vec3, dir: Vec3, tmin: Real, tmax: Real, record_hit: RecordHitFn) -> () {
                traverse_ray(stack, org, dir, tmin, tmax, record_hit, config);
            };

            body(inst, traverse_inst);

            stack.set_pointer(ptr);

            // Sentinel value marks the last element of the instances array.
            if inst_node.pad(0) == -1 {
                break()
            }

            inst_id += 1;
        }
    }
}