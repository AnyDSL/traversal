struct Ray {
    org: Vec4,
    dir: Vec4
}

struct Vec2 {
    x: f32,
    y: f32
}

struct Vec4 {
    x: f32,
    y: f32,
    z: f32,
    w: f32
}

struct Hit {
    tri_id: i32,
    tmax: f32,
    u: f32,
    v: f32
}

type RecordHitFn = fn (Intr, Real, Real, Real) -> ();
type BoxHitFn = fn (Real, Real) -> ();

type IterateRaysFn = fn (i32, fn (Vec3, Vec3, Real, Real, RecordHitFn) -> ()) -> ();
type IterateChildrenFn = fn (Real, Stack, fn (Box, BoxHitFn) -> ()) -> ();
type IterateTrianglesFn = fn (Real, Stack, fn (Tri, Intr) -> ()) -> ();
type TransparencyFn = fn (Mask, Intr, Real, Real) -> Mask;

fn no_transparency(mask: Mask, id: Intr, u: Real, v: Real) -> Mask { mask }

fn traverse(iterate_rays: IterateRaysFn,
            iterate_children: IterateChildrenFn,
            iterate_triangles: IterateTrianglesFn,
            transparency: TransparencyFn,
            ray_count: i32, any: bool) -> () {
    for org, dir, tmin, tmax, record_hit in iterate_rays(ray_count) {
        // Allocate a stack for the traversal
        let stack = allocate_stack();

        // Initialize traversal variables
        let idir = vec3(safe_rcp(dir.x), safe_rcp(dir.y), safe_rcp(dir.z));
        let oidir = vec3_mul(idir, org);
        let mut t = tmax;
        let mut u = real(0.0f);
        let mut v = real(0.0f);
        let mut tri_id = intr(-1);

        stack.push_top(0, tmin);

        // Traversal loop
        while !stack.is_empty() {
            let terminate = break;

            // Intersect children and update stack
            for box, hit in iterate_children(t, stack) {
                intersect_ray_box(oidir, idir, tmin, t, box, hit);
            }

            // Intersect leaves
            while is_leaf(stack.top()) {
                for tri, id in iterate_triangles(t, stack) {
                    intersect_ray_tri(org, dir, tmin, t, tri, |mut mask, t0, u0, v0| {
                        mask = transparency(mask, id, u0, v0);

                        t = select_real(mask, t0, t);
                        u = select_real(mask, u0, u);
                        v = select_real(mask, v0, v);
                        tri_id = select_intr(mask, id, tri_id);

                        if any && terminated(tri_id) {
                            terminate()
                        }
                    });
                }

                // Pop node from the stack
                stack.pop();
            }
        }

        record_hit(tri_id, t, u, v);
    }
}
