struct Ray {
    org: Vec4,
    dir: Vec4
}

struct Vec2 {
    x: f32,
    y: f32
}

struct Vec4 {
    x: f32,
    y: f32,
    z: f32,
    w: f32
}

struct Hit {
    inst_id: i32,
    tri_id: i32,
    tmax: f32,
    u: f32,
}

struct Inst {
    transf: Transf,
    id: i32
}

type TraverseInstanceFn = fn (Vec3, Vec3, Real, Real, RecordHitFn) -> ();
type RecordHitFn = fn (Intr, Intr, Real, Real, Real) -> ();
type BoxHitFn = fn (Real, Real) -> ();

type IterateRaysFn = fn (i32, fn (Vec3, Vec3, Real, Real, RecordHitFn) -> ()) -> ();
type IterateChildrenFn = fn (Real, Stack, fn (Box, BoxHitFn) -> ()) -> ();
type IterateTrianglesFn = fn (Real, Stack, fn (Tri, Intr) -> ()) -> ();
type IterateInstancesFn = fn (Real, Stack, fn(Inst, TraverseInstanceFn) -> ()) -> ();
type TransparencyFn = fn (Mask, Intr, Real, Real) -> Mask;

fn no_triangle() -> IterateTrianglesFn { |t, stack, body| {} }
fn no_instance() -> IterateInstancesFn { |t, stack, body| {} }
fn no_transparency() -> TransparencyFn { |mask, id, u, v| { mask } }

struct TraversalConfig {
    iterate_children: IterateChildrenFn,
    iterate_triangles: IterateTrianglesFn,
    iterate_instances: IterateInstancesFn,
    transparency: TransparencyFn,
    any_hit: bool
}

fn traverse_ray(stack: Stack, org: Vec3, dir: Vec3, tmin: Real, tmax: Real, record_hit: RecordHitFn, config: TraversalConfig) -> () @{
    // Initialize traversal variables
    let idir = vec3(safe_rcp(dir.x), safe_rcp(dir.y), safe_rcp(dir.z));
    let oidir = vec3_mul(idir, org);
    let mut t = tmax;
    let mut u = real(0.0f);
    let mut v = real(0.0f);
    let mut tri_id = intr(-1);
    let mut inst_id = intr(-1);

    // Traversal loop
    while !stack.is_empty() @{
        let terminate = break;

        // Intersect children and update stack
        for box, hit in config.iterate_children(t, stack) {
            intersect_ray_box(oidir, idir, tmin, t, box, hit);
        }

        // Intersect leaves
        while is_leaf(stack.top()) @{
            // The leaf may contain a list of instanced meshes
            for inst, traverse_instance in config.iterate_instances(t, stack) @{
                let tdir = transform_v(inst.transf, dir);
                let torg = transform_p(inst.transf, org);
                let when_hit: RecordHitFn = |inst0, intr0, t0, u0, v0| -> () {
                    let mask0 = terminated(intr0);
                    inst_id = select_intr(mask0, inst_id, intr(inst.id));
                    tri_id  = select_intr(mask0, tri_id, intr0);
                    t = select_real(mask0, t, t0);
                    u = select_real(mask0, u, u0);
                    v = select_real(mask0, v, v0);
                };
                traverse_instance(torg, tdir, tmin, t, when_hit);
            }

            // The leaf may contain a list of triangles
            for tri, id in config.iterate_triangles(t, stack) {
                intersect_ray_tri(org, dir, tmin, t, tri, |mut mask0, t0, u0, v0| {
                    mask0 = config.transparency(mask0, id, u0, v0);

                    t = select_real(mask0, t0, t);
                    u = select_real(mask0, u0, u);
                    v = select_real(mask0, v0, v);
                    tri_id = select_intr(mask0, id, tri_id);

                    if config.any_hit && all(terminated(tri_id)) {
                        terminate()
                    }
                });
            }

            // Pop node from the stack
            stack.pop();
        }
    }

    record_hit(inst_id, tri_id, t, u, v);
}

fn traverse_rays(iterate_rays: IterateRaysFn, ray_count: i32, config: TraversalConfig) -> () {
    for org, dir, tmin, tmax, record_hit in iterate_rays(ray_count) {
        // Allocate a stack for the traversal
        let stack = allocate_stack();
        stack.push_top(0, tmin);
        @traverse_ray(stack, org, dir, tmin, tmax, record_hit, config);
    }
}
