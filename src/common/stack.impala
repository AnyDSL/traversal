struct Stack {
    push: fn (i32, Real) -> (),
    push_top: fn (i32, Real) -> (),
    set_sentinel: fn () -> (),
    set_top: fn (i32, Real) -> (),
    pop: fn () -> (),
    top: fn () -> i32,
    tmin: fn() -> Real,
    is_empty: fn () -> bool
}

fn is_leaf(node_id: i32) -> bool { node_id < 0 }

fn allocate_stack() -> Stack {
    let sentinel = 0x76543210u32;
    let mut node_stack: [i32 * 64];
    let mut tmin_stack: [Real * 64];
    let mut id = -1;
    let mut top = sentinel as i32;
    let mut tmin = real(flt_max);

    Stack {
        push: |n, t| {
            id++;
            node_stack(id) = n;
            tmin_stack(id) = t;
        },
        push_top: |n, t| {
            id++;
            node_stack(id) = top;
            tmin_stack(id) = tmin;
            top = n;
            tmin = t;
        },
        set_sentinel: || {
            top = sentinel as i32;
            tmin = real(flt_max);
        },
        set_top: |n, t| {
            top = n;
            tmin = t;
        },
        pop: || {
            top = node_stack(id);
            tmin = tmin_stack(id);
            id--;
        },
        top: || { top },
        tmin: || { tmin },
        is_empty: || { top == sentinel as i32 }
    }
}
