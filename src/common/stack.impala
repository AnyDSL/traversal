struct Stack {
    push: fn (fn (i32) -> i32, i32) -> (),
    pop: fn () -> (),
    top: fn () -> i32,
    is_empty: fn () -> bool
}

fn is_leaf(nodes: &[Node], node_id: i32) -> bool { node_id < 0 }

fn allocate_stack() -> Stack {
    let mut stack : [i32 * 64];
    let mut id = 0;  // Stack top index
    let mut cur = 0; // Root node
    let sentinel = 0x76543210u32;

    stack(0) = sentinel as i32;

    fn push(k: fn (i32) -> i32, n: i32) -> () {
        for i in range(0, n - 1) {
            id++;
            stack(id) = k(i);
        }
        cur = k(n - 1);
    }

    fn pop() -> () {
        cur = stack(id);
        id--;
    }

    fn top() -> i32 {
        cur
    }

    fn is_empty() -> bool {
        cur == sentinel as i32
    }

    Stack {
        push: push,
        pop: pop,
        top: top,
        is_empty: is_empty
    }
}
