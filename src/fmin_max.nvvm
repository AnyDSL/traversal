define float @fmax(float %a, float %b) {
    %1 = call float asm "max.f32 $0, $1, $2;", "=f, f, f" (float %a, float %b)
    ret float %1
}

define float @fmin(float %a, float %b) {
    %1 = call float asm "min.f32 $0, $1, $2;", "=f, f, f" (float %a, float %b)
    ret float %1
}

define float @fmax_fmax(float %a, float %b, float %c) {
    %1 = call float asm "vmax.s32.s32.s32.max $0, $1, $2, $3;", "=r, r, r, r" (float %a, float %b, float %c)
    ret float %1
}

define float @fmin_fmin(float %a, float %b, float %c) {
    %1 = call float asm "vmin.s32.s32.s32.min $0, $1, $2, $3;", "=r, r, r, r" (float %a, float %b, float %c)
    ret float %1
}

define float @fmin_fmax(float %a, float %b, float %c) {
    %1 = call float asm "vmin.s32.s32.s32.max $0, $1, $2, $3;", "=r, r, r, r" (float %a, float %b, float %c)
    ret float %1
}

define float @fmax_fmin(float %a, float %b, float %c) {
    %1 = call float asm "vmax.s32.s32.s32.min $0, $1, $2, $3;", "=r, r, r, r" (float %a, float %b, float %c)
    ret float %1
}

define <4 x float> @ldg4f(<4 x float>* %addr) {
    %1 = call {float, float, float, float} asm "ld.global.nc.v4.f32 {$0, $1, $2, $3}, [$4];", "=f,=f,=f,=f, l" (<4 x float>* %addr)
    %2 = extractvalue {float, float, float, float} %1, 0
    %3 = extractvalue {float, float, float, float} %1, 1
    %4 = extractvalue {float, float, float, float} %1, 2
    %5 = extractvalue {float, float, float, float} %1, 3
    %6 = insertelement <4 x float> undef, float %2, i32 0
    %7 = insertelement <4 x float> %6, float %3, i32 1
    %8 = insertelement <4 x float> %7, float %4, i32 2
    %9 = insertelement <4 x float> %8, float %5, i32 3
    ret <4 x float> %9
}

define <4 x i32> @ldg4i(<4 x i32>* %addr) {
    %1 = call {i32, i32, i32, i32} asm "ld.global.nc.v4.s32 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r, l" (<4 x i32>* %addr)
    %2 = extractvalue {i32, i32, i32, i32} %1, 0
    %3 = extractvalue {i32, i32, i32, i32} %1, 1
    %4 = extractvalue {i32, i32, i32, i32} %1, 2
    %5 = extractvalue {i32, i32, i32, i32} %1, 3
    %6 = insertelement <4 x i32> undef, i32 %2, i32 0
    %7 = insertelement <4 x i32> %6, i32 %3, i32 1
    %8 = insertelement <4 x i32> %7, i32 %4, i32 2
    %9 = insertelement <4 x i32> %8, i32 %5, i32 3
    ret <4 x i32> %9
}

define i32 @float_as_int(float %x) {
    %1 = bitcast float %x to i32
    ret i32 %1
}

__device__ __inline__ int   min_min   (int a, int b, int c) { int v; asm("vmin.s32.s32.s32.min %0, %1, %2, %3;" : "=r"(v) : "r"(a), "r"(b), "r"(c)); return v; }
__device__ __inline__ int   min_max   (int a, int b, int c) { int v; asm("vmin.s32.s32.s32.max %0, %1, %2, %3;" : "=r"(v) : "r"(a), "r"(b), "r"(c)); return v; }
__device__ __inline__ int   max_min   (int a, int b, int c) { int v; asm("vmax.s32.s32.s32.min %0, %1, %2, %3;" : "=r"(v) : "r"(a), "r"(b), "r"(c)); return v; }
__device__ __inline__ int   max_max   (int a, int b, int c) { int v; asm("vmax.s32.s32.s32.max %0, %1, %2, %3;" : "=r"(v) : "r"(a), "r"(b), "r"(c)); return v; }
__device__ __inline__ float fmin_fmin (float a, float b, float c) { return __int_as_float(min_min(__float_as_int(a), __float_as_int(b), __float_as_int(c))); }
__device__ __inline__ float fmin_fmax (float a, float b, float c) { return __int_as_float(min_max(__float_as_int(a), __float_as_int(b), __float_as_int(c))); }
__device__ __inline__ float fmax_fmin (float a, float b, float c) { return __int_as_float(max_min(__float_as_int(a), __float_as_int(b), __float_as_int(c))); }
__device__ __inline__ float fmax_fmax (float a, float b, float c) { return __int_as_float(max_max(__float_as_int(a), __float_as_int(b), __float_as_int(c))); }
__device__ __inline__ float4 ldg4f(float4* addr) { return __ldg(addr); }
__device__ __inline__ int4 ldg4i(int4* addr) { return __ldg(addr); }

