type Real = f32;
type Id = i32;
type Intr = bool;

fn id(i: i32) -> Id {
    i
}

fn load_id(i: &i32) -> Id {
    *i
}

fn store_id(mut i: &i32, id: Id) -> () {
    *i = id
}

fn real(f: f32) -> Real {
    f
}

fn load_real(f: &f32) -> Real {
    *f
}

fn store_real(mut f: &f32, r: Real) -> () {
    *f = r
}

fn any(i: Intr) -> bool {
    i
}

fn all(i: Intr) -> bool {
    i
}

fn ballot(i: Intr) -> bool {
    i
}

fn mask_store_id(i: Intr, src: Id, mut dst: &Id) -> () {
    if i { *dst = src }
}

fn mask_store_real(i: Intr, src: Real, mut dst: &Real) -> () {
    if i { *dst = src }
}

fn fmin(a: Real, b: Real)-> Real @{
    if a < b { a } else { b }
}

fn fmax(a: Real, b: Real)-> Real @{
    if a > b { a } else { b }
}

static vector_size = 1;

